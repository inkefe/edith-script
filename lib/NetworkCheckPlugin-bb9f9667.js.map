{"version":3,"file":"NetworkCheckPlugin-bb9f9667.js","sources":["../src/plugins/NetworkCheckPlugin.js"],"sourcesContent":["const getAverage = (arr) => {\n  const total = arr.reduce((total, item) => total + item, 0)\n  return arr.length === 0 ? -1 : total / arr.length\n}\n// 测网速,返回单位为KB/sec的数值\n// https://juejin.im/post/5b4de6b7e51d45190d55340b\nconst testNetworkSpeed = () => {\n  const n = navigator\n  const c = 'connection'\n  const d = 'downlink'\n  if (n[c] && n[c][d]) {\n    // 在 Chrome65+ 的版本中，有原生的方法\n    return (n[c][d] * 1024) / 8 //单位为KB/sec\n  }\n}\n\n// 获取网络类型\n// https://juejin.im/post/5b4de6b7e51d45190d55340b\nconst getNetworkType = () => {\n  const n = navigator\n  const c = 'connection'\n  const e = 'effectiveType'\n  if (n[c] && n[c][e]) {\n    // 在 Chrome65+ 的版本中，有原生的方法\n    return n[c][e] //单位为KB/sec\n  }\n  return ''\n}\n\nclass NetworkCheckPlugin {\n  constructor() {\n    this.name = 'network'\n    this.state = {\n      speed: -1,\n      delays: -1,\n      netWorkType: getNetworkType(),\n    }\n    this.speeds = []\n    this.delays = []\n  }\n  // 通过发起http请求，测试网络速度, 定时调用回调，参数为单位为KB/sec的数值\n  measureBW = (fn, time) => {\n    const { getCurrentTime, measureBWSimple } = this.utils\n    const test = n => {\n      const startTime = getCurrentTime();\n      measureBWSimple({ t : Math.random() }).then(res => {\n        const fileSize = res.length\n        const endTime = getCurrentTime();\n        var speed = fileSize / ((endTime - startTime)/1000) / 1024;\n        fn && n && fn(Math.floor(speed));\n        if(n >= time) return\n        test(++n)\n      }).catch(e => {}) \n    }\n    test(0)\n  }\n\n  // 事件阻止\n  eventPresent = (e) => {\n    if (!e) return\n    const func = ['preventDefault', 'stopPropagation']\n    func.forEach((item) => e[item] && e[item]())\n    e.cancelBubble = true\n  }\n\n  // 获取延迟,通过js加载一张1x1的极小图片，来测试图片加载的所用的时长\n  measureDelay = (fn, count) => {\n    const { getCurrentTime, tryCatchFunc } = this.utils\n    count = count || 1\n    let n = 0\n    const src = '//webcdn.inke.cn/edith.cn/hm.gif?'\n    const ld = () => {\n        const t = getCurrentTime(), img = new Image;\n        img.onload = () => {\n            const tcp = getCurrentTime() - t\n            n++\n            fn(tcp) // 存储延迟回调\n            if(n < count) setTimeout(ld, 1000)\n        }\n      img.src = src + Math.random()\n      img.onerror = tryCatchFunc(this.eventPresent)\n    }\n    const img_start = new Image()\n    img_start.onerror = tryCatchFunc(this.eventPresent)\n    img_start.onload = ld\n    img_start.src = src + Math.random()\n  }\n\n  // 网络速度\n  checkNetSpeed() {\n    const speed = testNetworkSpeed()\n    if(speed) return this.speeds.push(speed)\n    this.measureBW(speed => this.speeds.push(speed), 1)\n  }\n  checkDelay () {\n    this.measureDelay(tcp => this.delays.push(tcp), 4)\n  }\n  startCheck() {\n    const rIC = window.requestIdleCallback\n    if (!rIC) {\n      setTimeout(this.checkDelay.bind(this), Math.random() * 6000 + 1000) // 随机延后执行\n      return setTimeout(this.checkNetSpeed.bind(this), Math.random() * 7000 + 1200)\n    }\n    // 任务队列\n    const tasks = [\n      this.checkDelay.bind(this), // 检测延迟\n      this.checkNetSpeed.bind(this), // 检测网速\n    ];\n    function myNonEssentialWork (deadline) {\n      // 如果帧内有富余的时间，或者超时\n      while ((deadline.timeRemaining() > 0 || deadline.didTimeout) && tasks.length > 0) {\n        tasks.shift()()\n      }\n      tasks.length > 0 && rIC(myNonEssentialWork);\n    }\n    rIC(myNonEssentialWork, { timeout: 7000 });\n  }\n\n  apply(compiler) {\n    const that = this\n    compiler(that.name, function({ state, utils }, callback) {\n      that.utils = utils\n      if(!state[that.name]){\n        that.startCheck.apply(that)\n      }\n      const { netWorkType } = that.state\n      callback({\n        speed: getAverage(that.speeds),\n        delay: getAverage(that.delays),\n        netWorkType\n      })\n    })\n  }\n}\n// if(!window.Edith) window.Edith = {}\n// window.Edith.NetworkCheckPlugin = NetworkCheckPlugin\nexport default NetworkCheckPlugin\n"],"names":["getAverage","arr","total","reduce","item","length","NetworkCheckPlugin","n","c","e","measureBW","fn","time","_this","utils","getCurrentTime","measureBWSimple","test","startTime","t","Math","random","then","res","speed","floor","catch","eventPresent","forEach","cancelBubble","measureDelay","count","tryCatchFunc","src","img_start","Image","onerror","onload","ld","img","tcp","setTimeout","name","state","delays","netWorkType","navigator","speeds","checkNetSpeed","d","testNetworkSpeed","this","push","_this2","checkDelay","_this3","startCheck","rIC","window","requestIdleCallback","bind","tasks","myNonEssentialWork","deadline","timeRemaining","didTimeout","shift","timeout","apply","compiler","that","callback","delay"],"mappings":"AAAA,IAAMA,EAAa,SAACC,OACZC,EAAQD,EAAIE,QAAO,SAACD,EAAOE,UAASF,EAAQE,IAAM,UAClC,IAAfH,EAAII,QAAgB,EAAIH,EAAQD,EAAII,QA2BvCC,8BAVEC,EACAC,EACAC,cAoBNC,UAAY,SAACC,EAAIC,SAC6BC,EAAKC,MAAzCC,IAAAA,eAAgBC,IAAAA,iBACX,SAAPC,EAAOV,OACLW,EAAYH,IAClBC,EAAgB,CAAEG,EAAIC,KAAKC,WAAYC,MAAK,SAAAC,OAGtCC,EAFaD,EAAIlB,SACLU,IACmBG,GAAW,KAAQ,KACtDP,GAAMJ,GAAKI,EAAGS,KAAKK,MAAMD,IACtBjB,GAAKK,GACRK,IAAOV,MACNmB,OAAM,SAAAjB,OAEXQ,CAAK,SAIPU,aAAe,SAAClB,MACTA,GACQ,CAAC,iBAAkB,mBAC3BmB,SAAQ,SAACxB,UAASK,EAAEL,IAASK,EAAEL,QACpCK,EAAEoB,cAAe,SAInBC,aAAe,SAACnB,EAAIoB,SACuBlB,EAAKC,MAAtCC,IAAAA,eAAgBiB,IAAAA,aACxBD,EAAQA,GAAS,MACbxB,EAAI,EACF0B,EAAM,oCAYNC,EAAY,IAAIC,MACtBD,EAAUE,QAAUJ,EAAanB,EAAKc,cACtCO,EAAUG,OAbC,SAALC,QACInB,EAAIJ,IAAkBwB,EAAM,IAAIJ,MACtCI,EAAIF,OAAS,eACHG,EAAMzB,IAAmBI,EAC/BZ,IACAI,EAAG6B,GACAjC,EAAIwB,GAAOU,WAAWH,EAAI,MAEnCC,EAAIN,IAAMA,EAAMb,KAAKC,SACrBkB,EAAIH,QAAUJ,EAAanB,EAAKc,eAKlCO,EAAUD,IAAMA,EAAMb,KAAKC,eAtDtBqB,KAAO,eACPC,MAAQ,CACXnB,OAAQ,EACRoB,QAAS,EACTC,aAhBEtC,EAAIuC,UACJtC,EAAI,aACJC,EAAI,gBACNF,EAAEC,IAAMD,EAAEC,GAAGC,GAERF,EAAEC,GAAGC,GAEP,UAWAsC,OAAS,QACTH,OAAS,8BAmDhBI,cAAA,sBACQxB,EApFe,eACjBjB,EAAIuC,UACJtC,EAAI,aACJyC,EAAI,cACN1C,EAAEC,IAAMD,EAAEC,GAAGyC,UAEG,KAAV1C,EAAEC,GAAGyC,GAAa,EA8EZC,MACX1B,EAAO,OAAO2B,KAAKJ,OAAOK,KAAK5B,QAC7Bd,WAAU,SAAAc,UAAS6B,EAAKN,OAAOK,KAAK5B,KAAQ,MAEnD8B,WAAA,2BACOxB,cAAa,SAAAU,UAAOe,EAAKX,OAAOQ,KAAKZ,KAAM,MAElDgB,WAAA,eACQC,EAAMC,OAAOC,wBACdF,SACHhB,WAAWU,KAAKG,WAAWM,KAAKT,MAAuB,IAAhB/B,KAAKC,SAAkB,KACvDoB,WAAWU,KAAKH,cAAcY,KAAKT,MAAuB,IAAhB/B,KAAKC,SAAkB,UAGpEwC,EAAQ,CACZV,KAAKG,WAAWM,KAAKT,WAChBH,cAAcY,KAAKT,OAS1BM,YAPSK,EAAoBC,SAEnBA,EAASC,gBAAkB,GAAKD,EAASE,aAAeJ,EAAMxD,OAAS,GAC7EwD,EAAMK,OAANL,GAEFA,EAAMxD,OAAS,GAAKoD,EAAIK,KAEF,CAAEK,QAAS,SAGrCC,MAAA,SAAMC,OACEC,EAAOnB,KACbkB,EAASC,EAAK5B,MAAM,WAA2B6B,OAAhB5B,IAAAA,MAAO7B,IAAAA,MACpCwD,EAAKxD,MAAQA,EACT6B,EAAM2B,EAAK5B,OACb4B,EAAKd,WAAWY,MAAME,OAEhBzB,EAAgByB,EAAK3B,MAArBE,YACR0B,EAAS,CACP/C,MAAOxB,EAAWsE,EAAKvB,QACvByB,MAAOxE,EAAWsE,EAAK1B,QACvBC,YAAAA"}