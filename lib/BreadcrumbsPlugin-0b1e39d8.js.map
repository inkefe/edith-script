{"version":3,"file":"BreadcrumbsPlugin-0b1e39d8.js","sources":["../src/plugins/BreadcrumbsPlugin.js"],"sourcesContent":["// import { utils.edithAddEventListener } from '../utils'\nimport { getTagName, eventTrigger, getRandomID, getTimeStamp, getXPath,\n  isIE8, isWhite } from '../common'\n\nlet utils = {}\nconst ie8 = isIE8()\n// 用户行为记录的最多数量\nconst RECORD_COUNT = 15\nlet ajaxWhiteList = []\nconst navigationProxy = () => {\n  if(!history.replaceState && history.pushState ) return\n  function proxyState (prop, fn) {\n    return function(...arg){\n      arg[2] && fn && eventTrigger.call({\n        oldURL: location.href,\n        newURL: arg[2],\n        method: prop,\n      }, 'navigationChange');  \n      return fn.apply(this, arg);\n    }\n  }\n  // 封装history.pushState\n  history.pushState = proxyState('pushState', history['pushState'])\n  // 封装history.replaceState\n  history.replaceState = proxyState('replaceState', history['replaceState'])\n}\n\nconst breadcrumbs = [] \n// 自定义add方法来添加数据，并且超过数量限制后自动会移除最早的记录,同时支持根据唯一id，选择覆盖还是添加操作\nfunction add(data, breadcrumbs) {\n  let index = -1 // 如果有相同的eid，代表只需要修改\n  breadcrumbs.forEach((item, i) => {\n    if(data.eid && item.eid === data.eid && index === -1) {\n      index = i\n    }\n  })\n  if(index >= 0) return breadcrumbs.splice(index, 1, {...breadcrumbs[index], ...data})\n  if(breadcrumbs.length >= RECORD_COUNT) breadcrumbs.shift()\n  breadcrumbs.push({\n    eid: getRandomID(),\n    ...data\n  })\n}\n/**\n * 用户交互行为记录监控\n */\nconst addActionRecord = type => event => {\n  // 记录用户点击元素的行为数据\n  const errorTarget = event.target; // target支持性好\n  const tagName = getTagName(errorTarget).toLowerCase()\n  const className = errorTarget.className;\n  const id = errorTarget.id;\n  const outerHTML = utils.getSimpleString(errorTarget.outerHTML)\n  const record = {\n    type,\n    time: utils.getCurrentTime(),\n    timeStamp: getTimeStamp(), \n    // page: {\n    //   url: location.href,\n    //   title: document.title\n    // },\n    detail: {\n      className,\n      id,\n      outerHTML,\n      tagName,\n      xPath: getXPath(errorTarget)\n    }\n  }\n  add(record, breadcrumbs)\n};\n\nconst addUrlRecord = method => event => {\n  const record = {\n    type: 'navigation',\n    time: utils.getCurrentTime(),\n    method: method || event.detail.method,\n    timeStamp: getTimeStamp(),\n    detail: {\n      from: {\n        url: utils.getSimpleString(event.oldURL || event.detail.oldURL),\n        title: document.title\n      },\n      to: {\n        url: utils.getSimpleString(event.newURL || event.detail.newURL),\n      }\n    }\n  }\n  add(record, breadcrumbs)\n}\n\n\n/**\n * 添加http请求记录监控，包括fetch\n */\nconst addHttpRecord = (xhr, type = 'XMLHttpRequest') => {\n  const { method, status, statusText, responseURL, url, body = null,\n    endTime, _eid, timeStamp, startTime } = xhr\n  const elapsedTime = endTime - startTime // 请求耗时\n  if(isWhite(ajaxWhiteList, url)) return //白名单接口不记录\n  const record = {\n    eid: _eid,\n    type,\n    time: startTime,\n    timeStamp,\n    // page: {\n    //   url: location.href,\n    //   title: document.title\n    // },\n    elapsedTime,\n    detail: {\n      method, // 请求方法\n      status, // 状态码\n      body, // post请求的body\n      // requestHeader,\n      // responseHeader: xhr.getAllResponseHeaders() || {}, // 这个方法不能解构出来赋值\n      statusText, // 状态\n      url: utils.getSimpleString(responseURL || url, 150), // 接口响应地址\n    }\n  }\n  add(record, breadcrumbs)\n}\n\n// 记录ajax请求\nconst recordAjax = () => {\n  const callBack = e => {\n    const { target: xhr, time } = e.detail\n    xhr._eid = xhr._eid || getRandomID()\n    xhr.timeStamp = xhr.timeStamp || getTimeStamp()\n    xhr.endTime = time // 不断更新状态\n    addHttpRecord(xhr)\n  }\n  utils.edithAddEventListener('ajaxOpen', callBack)\n  utils.edithAddEventListener('ajaxProgress', callBack);\n  // 当XHR发生 abort / timeout / error 时事件触，loadend是最后触发的\n  utils.edithAddEventListener('ajaxLoadEnd', callBack);\n}\n// getAllResponseHeaders没有\nconst recordFetch = () => {\n  const callBack = e => {\n    const { target: { options }, time } = e.detail\n    options.timeStamp = options.timeStamp || getTimeStamp()\n    const xhr = {\n      ...options,\n      ...e.detail,\n      endTime: time,\n      // requestHeader: options.headers\n    }\n    addHttpRecord(xhr, 'fetchRequest')\n  }\n  utils.edithAddEventListener('fetchStart', callBack);\n  utils.edithAddEventListener('fetchEnd', callBack);\n}\n\nconst addWebSocketRecord = method => ws => {\n  const { _eid: eid, time, elapsedTime, url, readyState, timeStamp } = ws\n  const record = {\n    eid,\n    type: 'webSocket',\n    time,\n    timeStamp,\n    method,\n    elapsedTime, // 建立连接耗时\n    detail: {\n      url,\n      readyState,\n    }\n  }\n  add(record, breadcrumbs)\n}\n\n// 记录WebSocket，建立连接和断开，算两次不同的行为记录\nconst recordWebSocket = () => {\n  const callback = (type, isStart) => e => {\n    const { target: ws, time } = e.detail\n    const isOpen = type === 'open'\n    ws._eid = isOpen && !isStart && ws._eid ? ws._eid : getRandomID()\n    ws.openTime = ws.openTime || (isStart ? 0 : time )\n\n    ws.time = isOpen ? (ws.time || time) : time\n    ws.startTime = isStart ? time : ws.startTime\n    ws.elapsedTime = isOpen\n      ? time - ws.startTime\n      : time - (ws.openTime || ws.startTime)\n\n    ws.timeStamp = ws.timeStamp || getTimeStamp()\n    addWebSocketRecord(type)(ws)\n  }\n  utils.edithAddEventListener('webSocketStart', callback('open', true))\n  utils.edithAddEventListener('webSocketOpen', callback('open'))\n  utils.edithAddEventListener('webSocketClose', callback('close'))\n}\n\nconst behaviorRecord = () => {\n  utils.edithAddEventListener('click', addActionRecord('click'), true)\n  recordAjax()\n  recordFetch()\n  recordWebSocket() // 监听webSocket\n  if(ie8) {\n    let url = location.href\n    setInterval(function() {\n        if(url!=location.href){\n          addUrlRecord('intervalCheck')({\n            oldURL: url,\n            newURL: location.href,\n            timeStamp: getTimeStamp() // 模拟时间戳\n          })\n          url = location.href\n        }\n    }, 250);\n  } else {\n    utils.edithAddEventListener('hashchange', addUrlRecord('hashchange'))\n    utils.edithAddEventListener('navigationChange', addUrlRecord())\n  }\n}\n\n\nclass BreadcrumbsPlugin {\n  constructor(props = {}) {\n    this.name = 'breadcrumbs'\n    this.state = {\n    }\n  }\n  apply(compiler) {\n    const that = this;\n    compiler(this.name, function({ state, ajaxWhiteList: _ajaxWhiteList, utils: _utils }, callback) {\n      utils = _utils\n      if(!state[that.name]) {\n        ajaxWhiteList = _ajaxWhiteList\n        navigationProxy() // 自定义路由跳转事件\n        behaviorRecord()\n      }\n      callback(utils.compressData(breadcrumbs))\n      // callback(breadcrumbs)\n    })\n  }\n}\n// if(!window.Edith) window.Edith = {}\n// window.Edith.BreadcrumbsPlugin = BreadcrumbsPlugin\nexport default BreadcrumbsPlugin\n"],"names":["utils","ie8","isIE8","ajaxWhiteList","breadcrumbs","add","data","index","forEach","item","i","eid","splice","length","shift","push","getRandomID","addUrlRecord","method","event","type","time","getCurrentTime","detail","timeStamp","getTimeStamp","from","url","getSimpleString","oldURL","title","document","to","newURL","addHttpRecord","xhr","status","statusText","responseURL","body","endTime","_eid","startTime","elapsedTime","isWhite","recordWebSocket","callback","isStart","e","ws","target","isOpen","openTime","readyState","edithAddEventListener","behaviorRecord","callBack","errorTarget","tagName","getTagName","toLowerCase","className","id","outerHTML","xPath","getXPath","options","recordFetch","location","href","setInterval","BreadcrumbsPlugin","props","name","state","apply","compiler","that","this","_ajaxWhiteList","_utils","proxyState","prop","fn","arg","eventTrigger","call","history","replaceState","pushState","navigationProxy","compressData"],"mappings":"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"}